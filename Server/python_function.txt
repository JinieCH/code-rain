help(object)
help()
divmod(x, y)
type(object)
dir([object])
execfile(filename[globals, [locals])
eval(source[globals, [locals])
exec code([globals, [locals])
compile(string, filename, kind)
raw_input([prompt])
pprint.pprint(object¡¦)
len(object)
sys.getrefcount(object)
id(object)
range([satrt] stop [step])
sys.maxint
enumerate(iterable)
complex(real, [imag])
<complex>real
<complex>.imag
<complex>.conjugate()
decimal,Decimal(object)
abs(number)
int(x, [base])
long(x, [base])
flat(x)
pow(x, y, [z])
vars([object])
locals()
string.Template(string)
(object).substitue(dict)
str.upper()
str.lower()
str.swapcase()
str.capitalize()
str.title()
str.count(sub[start[end]])
str.find(sub[start[end]]])
str.rfind(sub[start[end]])
str.index(sub[start[end]]])
str.rindex(sub[start[end]])
str.startswith(prefix[start[end]])
str.endswith(suffix[start[end]])
str.strip([chars])
str.rstrip([chars])
str.replace(old, new[count])
str.split([[sep[maxsplit]])
str.join(sequence)
str.splitlines([keepends])
str.rsplit([sep[maxsplit]])
center(width[fillchar])
str.rjust(width[fillchar[)
expandtabs([tabsize])
isdigit()
str.isalpha()
str.isalnum()
str.islower()
str.istitle()
str.zfil(width)
string.digits
string.octdigits
string.hexdigits
string.letters
string.lowcase
string.uppercase
string.punctuation
string.printable
string.whitespace
str(object)
unicode(string[encoding[errors]])
ord( c)
chr(i)
unichr(i)
object.__doc__
L.append(object)
L.insert(index, object)
L.index(value, [start, [stop]])
L.count(value)
L.sort(key=None, reverse=False)
L.reverse()
L.remove(value)
L.extend(iterable)
L.pop([index])
cmp(x, y)
sorted(iterable[key][reverse])
reversed(sequence)
sys.argv
getopt.getopt(args, option[long_options])
array.array(typecode [initializer])
glob.glob(pathname)
os.path.isfile(path)
os.path.isdir(path)
os.path.ismount(path)
os.path.exists(path)
os.path.getszie(filename)
os.path.getatime(filename)
time.ctime(seconds)
time.time()
list([iterable])
tuple([iterable])
os.path.abspath(path)
os.path.split(p)
os.path.join(a¡¦)
os.path.normpath(path)
os.path.splitext(p)
os.linesep
os.sep
os.pathsep
os.curdir
os..pardir
urlparse.urlparse(urlstring[default_scheme[allow_fragment]])
urlparse.urlunparse(parts)
urlparse.urljoin(base, url[allow_fragments])
sys.getsizeof(object[default])
dict([arg])
siz(iterable])
D.keys()
D.values()
D.items()
key in D
D.clear()
D.copy()
D.get(key[default])
D.setdefault(key[default])
D.update([other])
D.popitem()
D.pop(key[default])
globals()
s.issubset(t)
s.issuperset(t)
s.union(t)
s.intersection(t)
s.difference(t)
s.symmetric_difference(t)
s.copy()
s.update(t)
s.intersection_update(t)
s.difference_update(t)
s.symmetric_difference_update(t)
s.add(x)
s.remove(x)
s.discard(x)
s.pop()
s.clear()
copy.copy(x)
copy.deepcopy(x)
round(x[n])
math.floor(x)
math.ceil(x)
repr(object)
hex(x)
oct(x)
open(filename[mode[bufsize]])
file.read([size])
file.write(str)
file.close()
file.readline([size])
file.readlines([sizehint])
file.xreadlines()
file.writelines(sequence)
file.seek(offset[whence])
file.tell()
file.flush()
file.fileno()
file.isatty()
file.truncate([size])
file.closed
file.mode
file.name
file.softspace
xrange([satr], stop[step])
sys.stdin
StringIO.StringIO([buffer])
StringIO.getvalue()
pickle.dump(obj, file[protocol])
pickle.load(file)
pickle.dumps(obj[protocol])
pickle.loads(string)
map(function, iterable)
filter(function, iterable)
reduce(function, iterable[initializer])
reduce(function, iterable[initializer])
f.__doc__
f.func_doc
f.__name__
f.func_name
f.func_defaults
f.func_code
f.func_globals
f.func_code.co_name
f.func_code.co_argcount
f.func_code.co_nlocals
f.func_code.co_varnames
f.func_code.co_code
f.func_code.co_names
f.func_code.co_filename
f.func_code.co_flags
__dict__
__import__
reload(module)
sys.path
__import__(name[globlas[locals[fromlist[level]]]])
getattr(object, name[default])
setattr(object, name, value)
hasattr(object, name)
delattr(object, name)
staticmethod(function)
classmethod(function)
object.__init__(self[])
object.__del__(self)
object.__add__(self, other)
object.__sub__(self, other)
object.__mul__(self, other)
object.__div__(self, other)
object.__truediv__(self, other)
object.__floordiv__(slef, other)
object.__mode__(self, other)
object.__divmode__(self, other)
object.__pow__(self, other[modulo])
object.__rshift__(self, other)
object.__and__(self, other)
object.__or__(self, other)
object.__neg__(self)
object.__pos__(self)
object.__abs__(self)
obejct.__int__(self)
obejct.__long__(self)
obejct.__float__(self)
obejct.__oct__(self)
obejct.__hex__(self)
obejct.__coerce__(self, other)
obejct.__len__(self)
obejct.__contains__(self, item)
obejct.__getitem__(self, key)
obejct.__setitem__(self, key, value)
obejct.__delitem__(self, key)
obejct.__iter__(self)
obejct.__repr__(self)
obejct.__str__(self)
obejct.__cmp__(self, other)
obejct.__lt__(self, other)
obejct.__eq__(self, other)
obejct.__gt__(self, other)
obejct.__ne__(self, other)
obejct.__ge__(self, other)
obejct.__hash__(self)
obejct.__nonzero__(self)
obejct.__getattr__(self, name)
obejct.__getattribute__(self, name)
obejct.__setattr__(self, name, value)
obejct.__delattr__(self, name)
obejct.__call__(self[args])
__slots__
property([fget[fset[fdel[doc]]]])
class.__mro__
class..mro()
class cmd.Cmd([completekey[stdin[stdout]]])
isinstance(object, classinfo)
class.__bases__
instance.__class__
class.__name__
object.__dict__
super(type[object-or-type])
__mro__
im_func
im_self
im_class
__doc__
__name__
__module__
__debug__
traceback.print_exc([limit[file]])
class weakref.ref(object[callback])
wakref.proxy(object[callback])
wakref.getweakrefcount(object)
weakref.getweakrefs(object)
class weakref.WeakValueDictionary([dict])
class weakref.WeakKeyDictionary([dict])
iter(o[sentinel])
iterator.next()
next(iterator[default])
D.iterkeys()
D.itervalues()
D.iteritems()
itertools.chain(*iterables)
itertools.count([n])
itertools.cycle(iterable)
itertools.dropwhile(predicate, iterable)
itertools.takewhile(predicate, iterable)
itertools,groupby(iterable[key])
operator.itemgetter(item[args])
itertools,.ifilter(predicate, iterable)
itertools.imap(function, *iterables)
itertools.izip(*iterables)
itertools.starmap(function, iterable)
itertools.ifilterfalse(predicate, iterable)
itertools.islice(iterable[start], stop[step])
itertools.repeat(object[times])
itertools.tee(iterable[n=2])
dircache.listdir(path)
dircache.annotate(head, list)
os.access(path, mode)
os.W_OK
os.chmod(path, mode)
os.rename(src, dst)
shutil.copyfile(str, dst)
os.remove(path)
os.link(src, dst)
os.symlink(src, dst)
os.readlink(path)
os.utime(path, times)
os.stat(path)
os.chown(path, uid, gid)
tempfile
os.chdir(path)
os.getcwd()
os.mkdir(path[mode])
os.makedirs(path[mode])
os.rmdir(path)
shutil.rntree(path[ignore_errors[onerror]])
shutil.copytree(src, dst[symlinks=False[ignore=None]])
max(iterable[args][key])
min(iterable[args][key])
os.walk(top[topdwn=True[onerror=None[followlinks=False]]])
os.path.expanduser(path)
os.path.expandvars(path)
os.path.normcase(path)
os.path.basename(path)
os.path.dirname(path)
os.path.splitdrive(path)
fnmatch.fnmatch(filename, pattern)
random.uniform(a, b)
slice([start]stop[step])